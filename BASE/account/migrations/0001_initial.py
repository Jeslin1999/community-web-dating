# Generated by Django 5.0.6 on 2024-06-25 03:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], default='M', max_length=1)),
                ('intrest', models.CharField(blank=True, max_length=100, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('rel_status', models.CharField(choices=[('S', 'Single'), ('SK', 'Single with Kid(s)'), ('D', 'Divorced'), ('DK', 'Divorced with Kid(s)'), ('W', 'Widowed'), ('WK', 'Widowed with Kid(s)'), ('SP', 'Separated'), ('SPK', 'Separated with Kid(s)')], default='S', max_length=3)),
                ('fath', models.CharField(blank=True, max_length=100, null=True)),
                ('community', models.CharField(blank=True, max_length=50, null=True)),
                ('mother_tonge', models.CharField(blank=True, max_length=100, null=True)),
                ('smoke', models.CharField(choices=[('N', 'No'), ('Y', 'Yes'), ('P', 'Plan to Quit')], default='N', max_length=1)),
                ('drinking', models.CharField(choices=[('R', 'Regular'), ('S', 'Socialy'), ('O', 'Occasionally'), ('T', 'Teetotaler'), ('P', 'Plan to Quit')], default='T', max_length=1)),
                ('images', models.FileField(blank=True, null=True, upload_to='upload/')),
                ('video', models.FileField(blank=True, null=True, upload_to='upload/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
